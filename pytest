from datetime import datetime
from selenium.webdriver.common.by import By
from selenium import webdriver
from selenium.common.exceptions import WebDriverException,InvalidSessionIdException
import time
import random
import csv
from tkinter.ttk import *
from tkinter import ttk
from tkinter import *
from tkinter import messagebox
import json
import pingparsing
import threading
root =Tk()
root.geometry('785x540+450+150')
root.resizable(False, False)
root.configure(bg='#0F121F')
root.title('NOMUS COMM - SYSTEMS PVT.LTD ')
title=Label(root,text="WiZ-104 Module Automation - Testing Tool",fg='red',bg='#00121F',font=('Helvetica',20,'bold')).place(x=110,y=15)
frame=Frame(root,borderwidth='1',height=465,width=730,bg='#E5E5E5',highlightthickness=3,highlightbackground='black',).place(x=25,y=60)
frame1=LabelFrame(root,borderwidth='1',height=210,width=350,bg='#E5E5E5',text='Device Information').place(x=400,y=80)#device
frame2=LabelFrame(root,borderwidth='1',height=210,width=350,bg='#E5E5E5',border=3,highlightthickness=2).place(x=30,y=100)#isp,apnframe
frame4=LabelFrame(root,borderwidth='1',height=190,width=350,bg='#E5E5E5',border=3,highlightthickness=2).place(x=30,y=320)#traget,count frame
frame3=LabelFrame(root,borderwidth='1',height=50,width=160,bg='#E5E5E5',text='Network Mode',font=(5)).place(x=180,y=225)#network
frame5=LabelFrame(root,borderwidth='1',height=50,width=160,bg='#E5E5E5',text='ICMP Packet Size',font=(5)).place(x=40,y=450)
#==-----------------------------------------------------------------------------------------------------------------------
#NO of times per networkmode Condition for limit
def only_numbers2(num2):
    if num2.isdigit() and 1 <= int(num2) <= 100:
        return True
    elif num2 == '':
        return True
    else:
        return False
def only_numbers4(num4):
    if num4.isdigit() and 1 <= int(num4) <= 10000:
        return True
    elif num4 == '':
        return True
    else:
        return False
validation2 = root.register(only_numbers2)#Entry box attach to def function
validation4 = root.register(only_numbers4)
def focus_out_entry_box(release, widget_text):
    if release['fg'] == 'Black' and len(release.get()) == 0:
        release.delete(0, END)
        release['fg'] = 'Grey'
        release.insert(0, widget_text)
def focus_in_entry_box(release):
    if release['fg'] == 'Grey':
        release['fg'] = 'Black'
        release.delete(0, END)
date = 'DD/MM/YYYY'
#================================================
zz = (datetime.now())
def sel():
    global yyyy
    m=var1.get()
    if m == 1:
        x = {'Auto': 2, '2G': 3, '3G': 4, '4G': 5}
        xx = ['Auto', '2G', '3G', '4G']
        yyy = []
        yyyy = []
        random.shuffle(xx)
        for i in range(len(xx)):
            aa = xx[i]
            cc = x.get(str(aa))
            yyy.append(aa)
            yyyy.append(cc)
        list2=['1st','2nd','3rd','4th']
        list3 = []
        while True:
            try:
                list3.append(list2.pop(0))
                list3.append(yyy.pop(0))
            except IndexError:
                break
        tuple1=tuple(list3)
        stringlist=str(tuple1).replace("'","")
        stringlist = str(stringlist).replace(",", "-")
        lable1 = Label(frame, text=str(stringlist), font=(2), bg='#E5E5E5').place(x=65, y=275)
        return yyyy
    else:
        yyy=['Auto','2G','4G','3G']
        yyyy =["2","3","5","4"]
        list2=['1st','2nd','3rd','4th']
        list3 = []
        while True:
            try:
                list3.append(list2.pop(0))
                list3.append(yyy.pop(0))
            except IndexError:
                break
        tuple1=tuple(list3)
        stringlist=str(tuple1).replace("'","")
        stringlist = str(stringlist).replace(",", "-")
        lable = Label(frame, text=str(stringlist), font=(1),bg='#E5E5E5').place(x=65, y=275)
        return yyyy
#auto select apn based on sim selection
def apn1(e1):
    A=isp.get()
    if A =='Airtel':
        apn.delete(0, 'end')
        apn.insert(0,'airtelgprs.com')
    elif A == 'Jio':
        apn.delete(0, 'end')
        apn.insert(0, 'jionet')
    elif A == 'BSNL':
        apn.delete(0, 'end')
        apn.insert(0, 'bsnlstatic')
    elif A == 'VI':
        apn.delete(0, 'end')
        apn.insert(0, 'www')
#submit Button get the value the all value on GUI screen
def submit1():
    #print(yyyy)
    #global x
    a = isp.get()
    b = apn.get()
    c = operator.get()
    d = targetip.get()
    e = Rebot.get()
    f = module.get()
    g = moduleFW.get()
    h = Firmware.get()
    i = Release.get()
    j = var.get()
    #print (type(j))
    jj = var1.get()
    k=count.get()
    l= threshold.get()
    if c == "":
        messagebox.showerror("Entry Error", "Please Enter operator" )
        return
    elif a == "":
        messagebox.showerror("Entry Error", "Please Enter ISP" )
        return
    elif b == "":
        messagebox.showerror("Entry Error", "Please Enter APN" )
        return
    elif e == "":
        messagebox.showerror("Entry Error", "Please Enter No of Times per NW Mode(1-100)")
        return
    elif jj == 0:
        messagebox.showerror("Entry Error", "Please Select Network Mode")
        return
    elif d == "":
        messagebox.showerror("Entry Error", "Please Enter Targetip")
        return
    elif k == "":
        messagebox.showerror("Entry Error", "Please Enter Count")
        return
    elif l == "":
        messagebox.showerror("Entry Error", "Please Enter threshold")
        return
    elif j == 0:
        messagebox.showerror("Entry Error", "Please Select ICMP Packet Size")
        return
    elif f == "":
        messagebox.showerror("Entry Error", "Please Enter Module Type")
        return
    elif g == "":
        messagebox.showerror("Entry Error", "Please Enter ModuleFW")
        return
    elif h == "":
        messagebox.showerror("Entry Error", "Please Enter Device FW")
        return
    elif Release.get() == '' or Release.get() == 'DD/MM/YYYY':
        messagebox.showerror("Entry Error", "Enter Realese Date")
        return

    R11["state"] = DISABLED
    R12["state"] = DISABLED
    R1["state"] = DISABLED
    R2["state"] = DISABLED


    #R11["state"] = DISABLED
    #R12["state"] = DISABLED
    #R1["state"] = DISABLED
    #R2["state"] = DISABLED
    submit_button["state"] = DISABLED
    pb1 = Progressbar(frame, orient=HORIZONTAL, length=200, mode='indeterminate')
    pb1.place(x=470, y=300)
    #submit_button_hide=Label(frame,text="",width=16,bg='#E5E5E5')
    #submit_button_hide.place(x=550,y=360,height=42)
    fields = ["Operator Name","Module Type", "Module FW", "Device FW Ver","Release Date","No of Times Per NW Mode","Target IP","No.of Count","Threshold(%)"]
    rows = [[c,f,g,h,i,e,d,k,l]]
    File_name = g + (zz.strftime('_%Y_%m_%d_%H_%M_%S_')) + str(j) + "Bytes" + '.csv'
    with open (File_name,mode="w", encoding="utf-8") as FP:
        yy = csv.writer(FP)
        yy.writerow(fields)
        yy.writerows(rows)
    class WiZ():
        def threadingbar(self):
            pb1.start()
            pb1['value'] += 20
            pb1.update_idletasks()
        def General_Config(self):
            ping_parser = pingparsing.PingParsing()
            transmitter = pingparsing.PingTransmitter()
            transmitter.destination = '192.168.1.1'
            transmitter.count = 4
            result = transmitter.ping()
            get = (json.dumps(ping_parser.parse(result).as_dict(), indent=4))
            pingdic = json.loads(get)
            time.sleep(10)
            #submit_button["state"] = DISABLED
            if pingdic['rtt_min']  is not None:
                oo=1
                while True:
                    try:
                        self.driver = webdriver.Firefox()
                        self.driver.get('http://192.168.1.1')
                        time.sleep(4)
                        break
                    except WebDriverException:
                        time.sleep(10)
                        self.driver.close()
                     #   print('Unable to Connect HTTP:', oo)
                        if oo == 4:
                            pb1.stop()
                            pb1.place_forget()
                            R11["state"] = NORMAL
                            R12["state"] = NORMAL
                            R1["state"] = NORMAL
                            R2["state"] = NORMAL
                            submit_button["state"] = NORMAL
                            #submit_button_hide.place_forget()
                            messagebox.showerror(title="HTTP", message="Unable to Connect to the device")
                            return
                    oo=oo+1
                self.driver.find_element(By.NAME, "PSWD").send_keys("NOMUS")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.ID, "Enter").click()
                self.driver.implicitly_wait(5)
                #assert self.driver.title=="Welcome Nomus WiZ"
                self.driver.switch_to.frame("treeFrame")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.LINK_TEXT, "Configuration +").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.LINK_TEXT, "IP Configuration +").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.XPATH, "/html/body/nav/ul/li[1]/ul/li[10]/a").click()
                self.driver.implicitly_wait(5)
                self.driver.switch_to.default_content()
                self.driver.implicitly_wait(5)
                self.driver.switch_to.frame("iFrameID")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.ID, "WiZConf")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.ID, "SIM1").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[2]/td[3]/select/option[2]").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.ID, "SIM2").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[3]/td[3]/select/option[3]").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.NAME, "Priority").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[4]/td[3]/select/option[2]").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.NAME, "SIM1_APN").clear()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.NAME, "SIM1_APN").send_keys("{}".format(b))
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.NAME, "Retries").send_keys("")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.NAME, "Retries").clear()
                self.driver.find_element(By.NAME, "Retries").send_keys("3")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.ID, "WiZConf")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.CLASS_NAME, "button").click()
                self.driver.implicitly_wait(5)
                self.driver.switch_to.default_content()
                self.driver.implicitly_wait(5)
                self.driver.switch_to.frame("treeFrame")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.LINK_TEXT, "System Control +").click()
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.XPATH, "/html/body/nav/ul/li[2]/ul/li[1]/a").click()
                self.driver.implicitly_wait(5)
                self.driver.switch_to.default_content()
                self.driver.implicitly_wait(5)
                self.driver.switch_to.frame("iFrameID")
                self.driver.implicitly_wait(5)
                self.driver.find_element(By.ID, "Submit").click()
                self.driver.switch_to.default_content()
                self.driver.implicitly_wait(5)
                time.sleep(10)
                self.driver.close()
                fields = ["Test Start Time","Network Mode","SIM","SIM Status","CSQ", "PPP Status","PPP UP time", "Connected Network","WAN Status", "Ping-32(T/R/L)", "Ping-32(min/avg/max)",
                          "Ping-1450(T/R/L)", "Ping-1450(min/avg/max)","Status"]
                with open(File_name, mode="a", encoding="utf-8") as FP:
                    yy = csv.writer(FP)
                    yy.writerow(fields)
                lll = 0
                dictionary = {'Auto': 2, '2G': 3, '3G': 4, '4G': 5}
                for i in range (len(yyyy)):
                    report1=dictionary.get(str(yyyy[i]))
                    time.sleep(30)
                    oo = 1
                    while True:
                        try:
                            self.driver = webdriver.Firefox()
                            self.driver.get('http://192.168.1.1')
                            time.sleep(4)
                            break
                        except WebDriverException:
                            time.sleep(10)
                            self.driver.close()
                           # print('Unable to Connect HTTP:', oo)
                            if oo == 4:
                                pb1.stop()
                                pb1.place_forget()
                                R11["state"] = NORMAL
                                R12["state"] = NORMAL
                                R1["state"] = NORMAL
                                R2["state"] = NORMAL
                                submit_button["state"] = NORMAL
                                #submit_button_hide.place_forget()
                                messagebox.showerror(title="HTTP", message="Unable to Connect to the device")
                                return
                    self.driver.find_element(By.NAME, "PSWD").send_keys("NOMUS")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.ID, "Enter").click()
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.frame("treeFrame")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.LINK_TEXT, "Configuration +").click()
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.LINK_TEXT, "IP Configuration +").click()
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.XPATH, "/html/body/nav/ul/li[1]/ul/li[10]/a").click()
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.default_content()
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.frame("iFrameID")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.ID, "WiZConf")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.NAME, "SIMOneNW").click()
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.XPATH,"/html/body/form/table/tbody/tr[7]/td[3]/select/option[{}]".format(yyyy[i])).click()  # __________AUTO_MODE
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.ID, "WiZConf")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.CLASS_NAME, "button").click()
                    self.driver.implicitly_wait(5)
                    N = self.driver.find_element(By.XPATH,"/html/body/form/table/tbody/tr[7]/td[2]").text
                    if i ==0:
                        reportstatus = Label(frame, text='{}  in progress'.format(N), width=20, bg='#E5E5E5',font=("arail", 10, 'bold'))
                        reportstatus.place(x=470, y=330)
                    elif i==1:
                        reportstatuss = Label(frame, text='Completed', bg='#E5E5E5', font=("arail", 10, 'bold'),width=9)
                        reportstatuss.place(x=530, y=330)
                        reportstatus1 = Label(frame, text='{}  in progress'.format(N), width=20, bg='#E5E5E5',font=("arail", 10, 'bold'))
                        reportstatus1.place(x=470, y=350)
                    elif i == 2:
                        reportstatus1 = Label(frame, text='Completed', bg='#E5E5E5', font=("arail", 10, 'bold'),width=9)
                        reportstatus1.place(x=530, y=350)
                        reportstatus2 = Label(frame, text='{}  in progress'.format(N), width=20, bg='#E5E5E5',font=("arail", 10, 'bold'))
                        reportstatus2.place(x=470, y=370)
                    elif i == 3:
                        reportstatus2 = Label(frame, text='Completed', bg='#E5E5E5', font=("arail", 10, 'bold'),width=9)
                        reportstatus2.place(x=530, y=370)
                        reportstatus3 =Label(frame, text='{}  in progress'.format(N), width=20, bg='#E5E5E5',font=("arail", 10, 'bold'))
                        reportstatus3.place(x=470, y=390)
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.default_content()
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.frame("treeFrame")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.LINK_TEXT, "System Control +").click()
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.XPATH, "/html/body/nav/ul/li[2]/ul/li[1]/a").click()
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.default_content()
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.frame("iFrameID")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.ID, "Submit").click()
                    self.driver.switch_to.default_content()
                    self.driver.switch_to.frame("treeFrame")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.LINK_TEXT, "System Control -").click()
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.LINK_TEXT, "System Control +").click()
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.LINK_TEXT, "Reboot").click()
                    self.driver.implicitly_wait(5)
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.default_content()
                    self.driver.implicitly_wait(5)
                    self.driver.switch_to.frame("iFrameID")
                    self.driver.implicitly_wait(5)
                    self.driver.find_element(By.ID, "Submit").click()
                    time.sleep(5)
                    self.driver.close()
                    ttt=datetime.now()
                    Start_Time = (ttt.strftime('%H:%M:%S'))
                    for i in range(int("{}".format(e))):
                        time.sleep(120)
                        qq=1
                        while True:
                            try:
                                self.driver = webdriver.Firefox()
                                self.driver.get('http://192.168.1.1')
                                time.sleep(4)
                                break
                            except WebDriverException:
                                time.sleep(10)
                                self.driver.close()
                               # print('Unable to Connect HTTP:', qq)
                                if qq == 4:
                                    pb1.stop()
                                    pb1.place_forget()
                                    R11["state"] = NORMAL
                                    R12["state"] = NORMAL
                                    R1["state"] = NORMAL
                                    R2["state"] = NORMAL
                                    submit_button["state"] = NORMAL
                                    #submit_button_hide.place_forget()
                                    messagebox.showerror(title="HTTP", message="Unable to Connect to the device")
                                    return
                            qq=qq+1
                        self.driver.find_element(By.NAME, "PSWD").send_keys("NOMUS")
                        self.driver.implicitly_wait(5)
                        self.driver.find_element(By.ID, "Enter").click()
                        self.driver.implicitly_wait(5)
                        self.driver.switch_to.default_content()
                        self.driver.switch_to.frame("treeFrame")
                        self.driver.implicitly_wait(5)
                        self.driver.find_element(By.XPATH,"/html/body/nav/ul/li[4]/a").click()
                        self.driver.find_element(By.XPATH,"/html/body/nav/ul/li[4]/ul/li[4]/a").click()
                        self.driver.switch_to.default_content()
                        self.driver.switch_to.frame("iFrameID")
                        ppp = self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[2]/td[2]").text
                        if ppp == 'Down':
                            for i in range(6):
                                self.driver.find_element(By.ID,"Refresh").click()
                                time.sleep(15)
                                ppp = self.driver.find_element(By.XPATH, "/html/body/form/table/tbody/tr[2]/td[2]").text
                                if ppp == 'Up':
                                    break
                        self.driver.implicitly_wait(10)
                        self.driver.switch_to.default_content()
                        self.driver.switch_to.frame("treeFrame")
                        self.driver.find_element(By.XPATH, "/html/body/nav/ul/li[4]/ul/li[2]/a").click()
                        self.driver.switch_to.default_content()
                        self.driver.switch_to.frame("iFrameID")
                        WAN_Status = self.driver.find_element(By.XPATH, '/html/body/form/table/tbody/tr[2]/td[2]').text
                        SIM_Status = self.driver.find_element(By.XPATH,'/html/body/form/table/tbody/tr[3]/td[2]').text
                        CSQ = self.driver.find_element(By.XPATH,'/html/body/form/table/tbody/tr[4]/td[2]').text
                        Network = self.driver.find_element(By.XPATH, '//*[@id="WiZConf"]/tbody/tr[6]/td[2]').text
                        self.driver.implicitly_wait(10)
                        time.sleep(5)
                        if ppp == "Up":
                            tt = datetime.now()
                            PPP_Time = (tt.strftime('%H:%M:%S'))
                            ping_parser = pingparsing.PingParsing()
                            transmitter = pingparsing.PingTransmitter()
                            transmitter.destination = d
                            transmitter.count = k
                            transmitter.packet_size = j
                            result = transmitter.ping()
                            get = (json.dumps(ping_parser.parse(result).as_dict(), indent=4))
                            pingdic = json.loads(get)
                            pinglossrate = int(pingdic['packet_loss_rate'])
                            failed = ' '
                            Packets = (
                            pingdic['packet_transmit'], pingdic['packet_receive'], pingdic['packet_loss_count'])
                            Status = str(Packets).replace(',', "/")
                            Health = 'RTO'
                            ts = 100 - int(l)
                            ee = (pingdic['rtt_min'])
                            if ee is None:
                                Health = "RTO"
                                if pinglossrate >= 80:
                                    failed = ('Failed : ' + str(
                                        100 - int(pingdic['packet_loss_rate'])) + '%')
                            else:
                                Ping = (int(pingdic['rtt_min']), int(pingdic['rtt_avg']), int(pingdic['rtt_max']))
                                Health = str(Ping).replace(',', "/")
                                if pinglossrate > ts:
                                    failed = ('Failed : ' + str(
                                        100 - int(pingdic['packet_loss_rate'])) + '%')
                                else:
                                    failed = 'Passed:  ' + str(
                                        100 - int(pingdic['packet_loss_rate'])) + '%'
                                    Status = str(Packets).replace(',', "/")
                            Ping_32 = 'N/A'
                            Ping_32_min = 'N/A'
                            Ping_1450 = 'N/A'
                            Ping_1450_min = 'N/A'
                            if j == 32:
                                Ping_32 = Status
                                Ping_32_min = Health
                            else:
                                Ping_1450 = Status
                                Ping_1450_min = Health
                            rows = [[Start_Time,N,a,SIM_Status,CSQ,ppp,PPP_Time,Network,WAN_Status,Ping_32, Ping_32_min, Ping_1450, Ping_1450_min,failed]]
                            with open(File_name, mode="a", encoding="utf-8") as FP:
                                    yy = csv.writer(FP)
                                    yy.writerows(rows)
                            time.sleep(10)
                            self.driver.switch_to.default_content()
                            self.driver.implicitly_wait(5)
                            self.driver.switch_to.frame("treeFrame")
                            self.driver.implicitly_wait(5)
                            self.driver.find_element(By.LINK_TEXT, "System Control +").click()
                            self.driver.implicitly_wait(5)
                            self.driver.find_element(By.LINK_TEXT, "Reboot").click()
                            self.driver.implicitly_wait(5)
                            self.driver.switch_to.default_content()
                            self.driver.implicitly_wait(5)
                            self.driver.switch_to.frame("iFrameID")
                            self.driver.implicitly_wait(5)
                            self.driver.find_element(By.ID, "Submit").click()
                            time.sleep(10)
                            self.driver.close()
                            tttt = datetime.now()
                            Start_Time = (tttt.strftime('%H:%M:%S'))
                        else:
                            self.driver.switch_to.default_content()
                            self.driver.implicitly_wait(5)
                            self.driver.switch_to.frame("treeFrame")
                            self.driver.implicitly_wait(5)
                            self.driver.find_element(By.LINK_TEXT, "System Control +").click()
                            self.driver.implicitly_wait(5)
                            self.driver.find_element(By.LINK_TEXT, "Reboot").click()
                            self.driver.implicitly_wait(5)
                            self.driver.switch_to.default_content()
                            self.driver.implicitly_wait(5)
                            self.driver.switch_to.frame("iFrameID")
                            self.driver.implicitly_wait(5)
                            self.driver.find_element(By.ID, "Submit").click()
                            time.sleep(5)
                            self.driver.close()
                            ttttt = datetime.now()
                            Start_Time = (ttttt.strftime('%H:%M:%S'))
                            PPP_Time = '-'
                            Ping_32 = '-'
                            Ping_32_min = '-'
                            Ping_1450 = '-'
                            Ping_1450_min = '-'
                            failed = 'Failed'
                            rows = [[Start_Time,N,a,SIM_Status,CSQ,ppp,PPP_Time,Network,WAN_Status,Ping_32, Ping_32_min, Ping_1450, Ping_1450_min,failed]]
                            with open(File_name, mode="a", encoding="utf-8") as FP:
                                yy = csv.writer(FP)
                                yy.writerows(rows)
                            pass
                   # print(" {} Completed".format(N))
                    lll=lll+1
                    if lll==4:
                        reportstatus3 = Label(frame, text='Completed', bg='#E5E5E5', font=("arail", 10, 'bold'),width=9)
                        reportstatus3.place(x=530, y=390)
                        time.sleep(5)
                        pb1.stop()
                        pb1.place_forget()
                        R11["state"] = NORMAL
                        R12["state"] = NORMAL
                        R1["state"] = NORMAL
                        R2["state"] = NORMAL
                        submit_button["state"] = NORMAL
                        #submit_button_hide.place_forget()
                        messagebox.showinfo(title="Test", message='Test is completed & Report Generated')
            else:
                time.sleep(5)
                pb1.stop()
                pb1.place_forget()
                R11["state"] = NORMAL
                R12["state"] = NORMAL
                R1["state"] = NORMAL
                R2["state"] = NORMAL
                submit_button["state"] = NORMAL
                #submit_button_hide.place_forget()
                messagebox.showerror(title="ICMP", message="Device is Un-Reachable Please try again")
    BB = WiZ()
    t1=threading.Thread(target=BB.threadingbar)
    t2=threading.Thread(target=BB.General_Config)
    t1.daemon = True
    t2.daemon = True
    t1.start()
    t2.start()
    stop_event = threading.Event()
    def stop_msg():
        exit_button = messagebox.askquestion(title='Abort', message='Are you sure')
        if exit_button == 'yes':
            root.quit()
            t2 = threading.Thread(target=BB.General_Config, args=stop_event)
            t1 = threading.Thread(target=BB.threadingbar,args=stop_event)
            try:
                ccc = BB.driver
                t3 = threading.Thread(target=ccc.close(), args=stop_event)
                t3.daemon = True
            except AttributeError:
                pass
            except InvalidSessionIdException:
                pass
        else:
            return
    root.protocol('WM_DELETE_WINDOW', stop_msg)
#-------------------Entry-------------------------------------------------------------
operator =Entry(frame,width=28)
operator.place(x=180,y=75)
apn= Entry(frame2,width=28)
apn.place(x=180,y=160)
Rebot=Entry(frame2,width=28,validate="key", validatecommand=(validation2, '%P'))
Rebot.place(x=180,y=200)
targetip=Entry(frame,width=28)
targetip.place(x=180,y=340)
count=Entry(frame,width=28,validate="key", validatecommand=(validation4, '%P'))
count.place(x=180,y=380)
module=Entry(frame,width=28)
module.place(x=550,y=100)
moduleFW=Entry(frame,width=28)
moduleFW.place(x=550,y=150)
Firmware=Entry(frame,width=28)
Firmware.place(x=550,y=205)
Release=Entry(frame,width=28,fg = 'Grey')
Release.place(x=550,y=260)
#==-----------------------------lables---------------------------------------------
Operator=Label(frame,text='Operator',bg='#E5E5E5',font=("arail",11,'bold')).place(x=40,y=75)
ISP=Label(frame2,text='ISP',bg='#E5E5E5',font=("arail",11,'bold')).place(x=40,y=120)
APN=Label(frame2,text='APN',bg='#E5E5E5',font=("arail",11,'bold')).place(x=40,y=160)
rebot=Label(frame2,text='No of Times per NW Mode',bg='#E5E5E5',font=("arail",11,'bold'),wraplength=100).place(x=40,y=200)
Targetip=Label(frame,text='Target IP',bg='#E5E5E5',font=("arail",11,'bold')).place(x=40,y=340)
Count=Label(frame,text='No.of Count',bg='#E5E5E5',font=("arail",11,'bold')).place(x=40,y=380)
Threshold=Label(frame,text='Threshold (%)',bg='#E5E5E5',font=("arail",11,'bold')).place(x=40,y=425)
MODULE=Label(frame,text='Module Type',bg='#E5E5E5',font=("arail",11,'bold')).place(x=440,y=100)
MODULEFW=Label(frame,text='Module FW',bg='#E5E5E5',font=("arail",11,'bold')).place(x=440,y=150)
firmware=Label(frame,text='Device FW Ver',bg='#E5E5E5',font=("arail",11,'bold')).place(x=440,y=205)#x=350,y=315
release=Label(frame,text='Release Date',bg='#E5E5E5',font=("arail",11,'bold')).place(x=440,y=260)#x=40,y=315
#===-----------------------------Comobox----------------------------------------------
isp = ttk.Combobox(frame2,textvariable=StringVar(),width=25)
isp['values'] = ('Airtel','Jio','BSNL','VI')
isp.place(x=180,y=120)
threshold = ttk.Combobox(frame,textvariable=StringVar(),width=25,state='readonly')
threshold['values'] = ('100','90','80','70','60')
threshold.place(x=180,y=425)
var1 =IntVar()
var = IntVar()#indicate redio button and set defult value
isp.bind('<FocusIn>',apn1)#auto apn set condition
Release.insert(0, date)
Release.bind("<FocusIn>", lambda args: focus_in_entry_box(Release))
Release.bind("<FocusOut>", lambda args: focus_out_entry_box(Release, date))
#==--------------------------------button------------------------------------------------------
R1 = Radiobutton(frame2, text="bytes32", variable=var, value=32,bg='#E5E5E5',activebackground='#E5E5E5',activeforeground='#FF121F',cursor="hand2")
R1.place(x=50, y=470)
R2 = Radiobutton(frame2, text="bytes1450", variable=var, value=1450,bg='#E5E5E5',activebackground='#E5E5E5',activeforeground='#FF121F',cursor="hand2")
R2.place(x=120, y=470)
R11 = Radiobutton(frame3, text="Random", variable=var1, value=1,command=sel,bg='#E5E5E5',activebackground='#E5E5E5')
R11.place(x=200, y=245)
R12= Radiobutton(frame3, text="Fixed", variable=var1, value=2,command=sel,bg='#E5E5E5',activebackground='#E5E5E5')
R12.place(x=270, y=245)
submit_button=Button(frame, command =submit1,text = 'Start',width=15,height=2,relief=RIDGE,activebackground="#83CAE6",bg='light gray',cursor="hand2")
submit_button.place(x=550,y=460)
def display_msg():
    exit_button = messagebox.askquestion(title='Abort',message='Are you sure')
    if exit_button == 'yes':
        root.quit()
   
        return
root.protocol('WM_DELETE_WINDOW', display_msg)
root.mainloop()
